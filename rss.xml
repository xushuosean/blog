<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://vuepress-theme-hope-demo.mrhope.site/blog/rss.xml" rel="self" type="application/rss+xml"/>
    <title>Sean</title>
    <link>https://vuepress-theme-hope-demo.mrhope.site/blog/</link>
    <description>A demo for vuepress-theme-hope</description>
    <language>zh-CN</language>
    <pubDate>Tue, 31 Aug 2021 14:14:46 GMT</pubDate>
    <lastBuildDate>Tue, 31 Aug 2021 14:14:46 GMT</lastBuildDate>
    <generator>@mr-hope/vuepress-plugin-feed</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <copyright>Copyright by Sean</copyright>
    <category>Javascript</category>
    <item>
      <title>算法</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/blog/algorithmhome/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/blog/algorithmhome/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/blog/rss.xml">算法</source>
      <pubDate>Mon, 30 Aug 2021 15:03:52 GMT</pubDate>
    </item>
    <item>
      <title>项目主页</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/blog/home/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/blog/home/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/blog/rss.xml">项目主页</source>
      <pubDate>Mon, 30 Aug 2021 15:03:52 GMT</pubDate>
    </item>
    <item>
      <title>自定义布局</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/blog/layout/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/blog/layout/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/blog/rss.xml">自定义布局</source>
      <pubDate>Mon, 30 Aug 2021 15:03:52 GMT</pubDate>
      <content:encoded><![CDATA[<p>您可以使用带有 Markdown 支持的插槽来自定义页面布局。</p>
<div><p>注意</p>
<p>此处仅仅是一个演示，你应该自行根据需求添加样式。</p>


</div>
<template #page-top><p>页面顶部内容</p>
</template><template #page-bottom><p>页面底部内容</p>
</template><template #content-top><p>内容顶部内容</p>
</template><template #content-bottom><p>内容底部内容</p>
</template><template #navbar-start><p>导航栏起始内容</p>
</template><template #navbar-center><p>导航栏中部内容</p>
</template><template #navbar-end><p>导航栏末尾内容</p>
</template><template #sidebar-top><p>侧边栏顶部内容</p>
</template><template #sidebar-center><p>侧边栏中部内容</p>
</template><template #sidebar-bottom><p>侧边栏底部内容</p>
</template>]]></content:encoded>
    </item>
    <item>
      <title>项目主页</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/blog/other-home/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/blog/other-home/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/blog/rss.xml">项目主页</source>
      <pubDate>Mon, 30 Aug 2021 15:03:52 GMT</pubDate>
    </item>
    <item>
      <title>函数柯里化</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/blog/post/curry/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/blog/post/curry/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/blog/rss.xml">函数柯里化</source>
      <category>Javascript</category>
      <pubDate>Thu, 20 May 2021 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="on-the-first"> On the first</h2>
<p>之前在面经中看到过函数柯里化，但是在自己的面试过程中也没有遇到过，但是最近又准备看新的机会，所以又开始关注起这个问题，顺便写一篇文章记录一下</p>
<h2 id="函数柯里化"> 函数柯里化</h2>
<h4 id="柯里化到底是什么"> 柯里化到底是什么？</h4>
<p>我一直没有找到一个完整的解释，直到看到这里 <a href="https://stackoverflow.com/questions/36314/what-is-currying" target="_blank" rel="noopener noreferrer">What is currying</a></p>
<blockquote>
<p>柯里化就是将一个拥有多个参数的 <strong>方法</strong> 拆解为一系列 <strong>单个参数</strong> 的方法</p>
</blockquote>
<p>所以重点在这里。</p>
<ul>
<li>
<p>多个参数的方法</p>
</li>
<li>
<p>单个参数</p>
</li>
</ul>
<h4 id="eg"> .eg</h4>
<p>有了这个定义以后，我们尝试定义一个多个参数的方法</p>
<div><pre><code><span>function</span> <span>add</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>{</span>
    <span>return</span> a <span>+</span> b
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>看到了吗？与其他的<code>currying</code>化的示例简直一模一样，那么接下来呢？</p>
<p>先说一下我们对于柯里化的预期</p>
<p>我们期望能够将 <code>add(a, b)</code> 能够转换为 <code>add(a)(b)</code>，也就是说，当传入第一个参数时，即：</p>
<p><code>add(a)</code></p>
<p>我们期望他能够返回一个function，使得<code>add(a)(b)</code>能够成功被调用</p>
<p>所以，我们把这个方法拆解为一系列接受单个参数的方法</p>
<div><pre><code><span>// 硬编码柯里化</span>
<span>function</span> <span>add</span><span>(</span><span>a</span><span>)</span> <span>{</span>
    <span>return</span> <span>function</span><span>(</span><span>b</span><span>)</span> <span>{</span>
        <span>return</span> a <span>+</span> b
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>这样，就完成了一个函数的<strong>柯里化</strong></p>
<p>但是这样的话，我们每次想要柯里化一个函数都需要重写这个方法，这也太麻烦了，且修改原函数的定义，可能会导致未知的问题，所以我们需要一个通用的方法，能够返回新的function</p>
<h2 id="柯里化function"> 柯里化function</h2>
<p>沿用刚刚的<strong>硬编码柯里化</strong>方案，我们继续考虑如何更灵活的调用</p>
<p>既然重写方法如此麻烦，那不如将方法传入一个新定义的方法（currying）内，使其成为currying的参数。</p>
<div><pre><code><span>function</span> <span>currying</span><span>(</span><span>fn</span><span>)</span> <span>{</span>
    <span>return</span> something
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>我们所期望的是，传入待柯里化的function，返回一个新的方法，可以让我们直接连续调用</p>
<p>期望的用法如下</p>
<div><pre><code><span>let</span> curryingAdd <span>=</span> <span>currying</span><span>(</span>add<span>)</span>

<span>curryingAdd</span><span>(</span>a<span>)</span><span>(</span>b<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>但是却存在一个问题：</p>
<p>何时返回add方法的值呢？很简单</p>
<h4 id="参数个数大于等于add所需的参数"> 参数个数大于等于add所需的参数</h4>
<p>当柯里化后的方法（curryingAdd）所接收的值的个数，大于等于add所接收的个数时，就返回计算值</p>
<p>但是如何返回计算值呢？那我们可以保存所有传入的参数和原函数（add），当条件达到时，则调用函数（add）并传入所有的值</p>
<p>那我们可以将代码按照如下改造</p>
<blockquote>
<p>前置知识：function拥有一个length属性，为定义改方法时的参数个数</p>
</blockquote>
<div><pre><code><span>function</span> <span>currying</span><span>(</span><span>fn<span>,</span> <span>...</span>args</span><span>)</span> <span>{</span>
    <span>let</span> len <span>=</span> fn<span>.</span>length
    
    <span>if</span> <span>(</span>args<span>.</span>length <span>>=</span> len<span>)</span><span>{</span>
        <span>// 返回计算值</span>
        <span>return</span> <span>fn</span><span>.</span><span>call</span><span>(</span><span>null</span><span>,</span> <span>...</span>args<span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
        <span>// 保存args</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><h4 id="情况相反"> 情况相反</h4>
<p>如果情况相反，传入的参数不足以调用add，理论上的期望继续调用的路径是</p>
<div><pre><code><span>let</span> curryingAdd_a <span>=</span> <span>curryingAdd</span><span>(</span>a<span>)</span>

<span>curryingAdd_a</span><span>(</span>b<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>所以在这种情况下，应该返回一个function</p>
<p>在这个function调用时，应该继续检测是否满足参数的个数是否大于fn的个数，这和currying方法的功能一致，所以我们继续递归调用currying</p>
<div><pre><code><span>function</span> <span>currying</span><span>(</span><span>fn<span>,</span> <span>...</span>args</span><span>)</span> <span>{</span>
    <span>let</span> len <span>=</span> fn<span>.</span>length
    
    <span>if</span> <span>(</span>args<span>.</span>length <span>>=</span> len<span>)</span><span>{</span>
        <span>// 返回计算值</span>
        <span>return</span> <span>fn</span><span>.</span><span>call</span><span>(</span><span>null</span><span>,</span> <span>...</span>args<span>)</span>
    <span>}</span> <span>else</span> <span>{</span>
        <span>return</span> <span>function</span> <span>curried</span><span>(</span><span><span>...</span>args2</span><span>)</span> <span>{</span>
            <span>return</span> <span>currying</span><span>(</span>fn<span>,</span> <span>...</span><span>[</span><span>...</span>args<span>,</span> <span>...</span>args2<span>]</span><span>)</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>那这样，就解决了柯里化硬编码的问题</p>
<h2 id="in-the-end"> In the end</h2>
<p>柯里化函数是保存状态并且返回一个仍然可以调用的方法的函数</p>
]]></content:encoded>
    </item>
    <item>
      <title>博客主页</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/blog/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/blog/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/blog/rss.xml">博客主页</source>
      <pubDate>Mon, 30 Aug 2021 15:03:52 GMT</pubDate>
    </item>
    <item>
      <title>幻灯片页</title>
      <link>https://vuepress-theme-hope-demo.mrhope.site/blog/slides/</link>
      <guid>https://vuepress-theme-hope-demo.mrhope.site/blog/slides/</guid>
      <source url="https://vuepress-theme-hope-demo.mrhope.site/blog/rss.xml">幻灯片页</source>
      <pubDate>Mon, 30 Aug 2021 15:03:52 GMT</pubDate>
      <content:encoded><![CDATA[
<i>Not supported content</i>]]></content:encoded>
      <enclosure url="https://vuepress-theme-hope-demo.mrhope.site/blog/logo.svg" type="image/svg+xml"/>
    </item>
  </channel>
</rss>